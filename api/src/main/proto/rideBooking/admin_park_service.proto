syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "rideBooking/models.proto";
package rideBooking;

service AdminParkService {
  // 1. Agregar una atracción al parque
  // return ride id
  rpc AddRide(AddRideRequest) returns(google.protobuf.BoolValue);
  // 2. Agregar un pase de atracciones al parque
  // return if pass is created
  rpc AddPassToPark(AddPassRequest) returns(google.protobuf.BoolValue);
  // 3. Cargar la capacidad de los slots de una atracción
  // return capacity id
  rpc AddSlotCapacity(AddSlotCapacityRequest) returns(SlotCapacityResponse);
}

message AddRideRequest{
  string rideName = 1;
  RideTime rideTime = 2;
  int32 slotMinutes = 3;
}

message AddPassRequest{
  //id del visitante (en formato UUID), el tipo de pase y el día del año de validez
  string visitorId = 1;
  PassTypeEnum passType = 2;
  int32 validDay = 3;
}

message AddSlotCapacityRequest{
  string rideName = 1;
  int32 validDay = 2;
  int32 slotCapacity = 3;
}

message SlotCapacityResponse {
  int32 acceptedAmount = 1;
  int32 relocatedAmount = 2;
  int32 cancelledAmount = 3;
}